package Panel.Customer;

import Transaction.Transaction;
import User.Customer;
import java.util.ArrayList;
import javax.swing.RowFilter;
import javax.swing.table.DefaultTableModel;
import JSwingObjects.JTablesAndCombobox;
import java.awt.Color;
import java.awt.Component;
import javax.swing.JTable;
import javax.swing.table.DefaultTableCellRenderer;
import javax.swing.table.TableRowSorter;

/**
 *
 * @author CHOK QI YANG TP070091
 */
public class TransactionHistoryPanel extends javax.swing.JPanel implements JTablesAndCombobox{
    private final DefaultTableModel model = new DefaultTableModel() {
        @Override
        public boolean isCellEditable(int row, int column){  
            return false;  
        }
    };
    private final TableRowSorter<DefaultTableModel> sorter = new TableRowSorter<>(model);
    private final String[] transactionHistoryColumns = {"ID", "Type", "Date", "Time", "Amount (RM)", "Status"};

    private Customer customer;
    private Transaction transaction;
    
    public TransactionHistoryPanel() {
        initComponents();
        model.setColumnIdentifiers(transactionHistoryColumns);
        transactionHistoryTable.setModel(model);
        transactionHistoryTable.setRowSorter(sorter);
        transactionHistoryTable.getColumnModel().getColumn(5).setCellRenderer(new CustomCellRenderer());
    }
    
    private class CustomCellRenderer extends DefaultTableCellRenderer {
        private final Color completedColor = new Color(0, 255, 0, 100);
        private final Color notCompletedColor = new Color(255, 0, 0, 100);
        
        @Override
        public Component getTableCellRendererComponent(JTable table, Object value, boolean isSelected, boolean hasFocus, int row, int column) {
            Component rendererComponent = super.getTableCellRendererComponent(table, value, isSelected, hasFocus, row, column);

            if (column == 5) {
                String status = value.toString();
                if ("Successful".equals(status)) {
                    rendererComponent.setBackground(completedColor);
                } else {
                    rendererComponent.setBackground(notCompletedColor);
                }
            } else {
                rendererComponent.setBackground(table.getBackground());
            }
            return rendererComponent;
        }
    }
    
    public void displayTransactionHistory(Customer customer) {
        this.customer = customer;
        model.setRowCount(0);
        Transaction transactions = new Transaction(customer);
        
        ArrayList<Transaction> transactionHistoryList = transactions.getTransactionHistoryList(true);
        
        if (!transactionHistoryList.isEmpty()) {
            for (Transaction transactionHistory : transactionHistoryList) {
                String[] tableInfo = {transactionHistory.getTransactionID(), transactionHistory.getTransactionType(),
                    transactionHistory.getTransactionDate(), transactionHistory.getTransactionTime(),
                    String.format("%.2f", transactionHistory.getTransactionAmount()),
                    transactionHistory.getTransactionStatus()};
                
                addItemToComboBox(cbxType, transactionHistory.getTransactionType());
                addItemToComboBox(cbxDate,  transactionHistory.getTransactionDate());
                
                model.addRow(tableInfo); 
            }
        }
    }
    
    @Override
    public boolean comboboxFilterImplementation(RowFilter.Entry<? extends DefaultTableModel, ? extends Object> entry) {
        String typeFilter = (String) cbxType.getSelectedItem();   
        String dateFilter = (String) cbxDate.getSelectedItem();
        
        String dateItem = entry.getStringValue(2);
        String typeItem = entry.getStringValue(1);

        boolean type = "All".equals(typeFilter) || typeItem.equals(typeFilter);
        boolean date = "All".equals(dateFilter) || dateItem.equals(dateFilter);

        return date && type; 
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        transactionHistoryTable = new javax.swing.JTable();
        lblServices = new javax.swing.JLabel();
        cbxType = new javax.swing.JComboBox<>();
        cbxDate = new javax.swing.JComboBox<>();
        lblDate = new javax.swing.JLabel();
        scrollRestaurantAddress3 = new javax.swing.JScrollPane();
        txtReceipt = new javax.swing.JTextArea();

        setBackground(new java.awt.Color(255, 255, 255));
        setMaximumSize(new java.awt.Dimension(926, 560));
        setMinimumSize(new java.awt.Dimension(926, 560));
        setPreferredSize(new java.awt.Dimension(926, 560));

        transactionHistoryTable.setModel(model);
        transactionHistoryTable.setRowHeight(50);
        transactionHistoryTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                transactionHistoryTableMouseReleased(evt);
            }
        });
        jScrollPane1.setViewportView(transactionHistoryTable);
        if (transactionHistoryTable.getColumnModel().getColumnCount() > 0) {
            transactionHistoryTable.getColumnModel().getColumn(0).setResizable(false);
            transactionHistoryTable.getColumnModel().getColumn(1).setResizable(false);
            transactionHistoryTable.getColumnModel().getColumn(2).setResizable(false);
            transactionHistoryTable.getColumnModel().getColumn(3).setResizable(false);
            transactionHistoryTable.getColumnModel().getColumn(4).setResizable(false);
            transactionHistoryTable.getColumnModel().getColumn(5).setResizable(false);
        }

        lblServices.setFont(new java.awt.Font("Dubai Light", 0, 20)); // NOI18N
        lblServices.setText("Type:");

        cbxType.setFont(new java.awt.Font("Dubai Light", 0, 16)); // NOI18N
        cbxType.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "All" }));
        cbxType.setToolTipText("A style of cooking characterized by distinctive ingredients, techniques and dishes, and usually associated with a specific culture or geographic region.");
        cbxType.setMaximumSize(new java.awt.Dimension(105, 25));
        cbxType.setMinimumSize(new java.awt.Dimension(105, 25));
        cbxType.setPreferredSize(new java.awt.Dimension(105, 25));
        cbxType.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                cbxTypeItemStateChanged(evt);
            }
        });

        cbxDate.setFont(new java.awt.Font("Dubai Light", 0, 16)); // NOI18N
        cbxDate.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "All" }));
        cbxDate.setToolTipText("A style of cooking characterized by distinctive ingredients, techniques and dishes, and usually associated with a specific culture or geographic region.");
        cbxDate.setMaximumSize(new java.awt.Dimension(105, 25));
        cbxDate.setMinimumSize(new java.awt.Dimension(105, 25));
        cbxDate.setPreferredSize(new java.awt.Dimension(105, 25));
        cbxDate.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                cbxDateItemStateChanged(evt);
            }
        });

        lblDate.setFont(new java.awt.Font("Dubai Light", 0, 20)); // NOI18N
        lblDate.setText("Date:");

        txtReceipt.setEditable(false);
        txtReceipt.setBackground(new java.awt.Color(255, 255, 255));
        txtReceipt.setColumns(20);
        txtReceipt.setFont(new java.awt.Font("Dubai Light", 0, 14)); // NOI18N
        txtReceipt.setLineWrap(true);
        txtReceipt.setRows(1);
        txtReceipt.setTabSize(4);
        txtReceipt.setWrapStyleWord(true);
        txtReceipt.setBorder(javax.swing.BorderFactory.createEmptyBorder(1, 1, 1, 1));
        txtReceipt.setMargin(new java.awt.Insets(0, 0, 0, 0));
        scrollRestaurantAddress3.setViewportView(txtReceipt);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 600, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(scrollRestaurantAddress3))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(lblServices)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(cbxType, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(lblDate)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(cbxDate, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblServices)
                    .addComponent(cbxType, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblDate)
                    .addComponent(cbxDate, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(scrollRestaurantAddress3)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 487, Short.MAX_VALUE))
                .addContainerGap(26, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void cbxTypeItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_cbxTypeItemStateChanged
        applyFilters(sorter);
    }//GEN-LAST:event_cbxTypeItemStateChanged

    private void cbxDateItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_cbxDateItemStateChanged
        applyFilters(sorter);
    }//GEN-LAST:event_cbxDateItemStateChanged

    private void transactionHistoryTableMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_transactionHistoryTableMouseReleased
        if (transactionHistoryTable.getSelectedRow() >= 0) {
            String selectedTransactionID = (String) transactionHistoryTable.getValueAt(transactionHistoryTable.getSelectedRow(), 0);
            transaction = (Transaction) new Transaction(selectedTransactionID).getObject("Transaction History");
            if (transaction.getReceipt() != null) {
                txtReceipt.setText(transaction.getReceipt().toString());
            } else {
                txtReceipt.setText("Admin has yet to release the receipt.");
            }
            txtReceipt.setCaretPosition(0);
        }
    }//GEN-LAST:event_transactionHistoryTableMouseReleased


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox<String> cbxDate;
    private javax.swing.JComboBox<String> cbxType;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel lblDate;
    private javax.swing.JLabel lblServices;
    private javax.swing.JScrollPane scrollRestaurantAddress3;
    private javax.swing.JTable transactionHistoryTable;
    private javax.swing.JTextArea txtReceipt;
    // End of variables declaration//GEN-END:variables
}
