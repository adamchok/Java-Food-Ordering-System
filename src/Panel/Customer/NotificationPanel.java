package Panel.Customer;

import Notification.Notification;
import User.Customer;
import java.util.ArrayList;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableRowSorter;  

/**
 *
 * @author CHOK QI YANG TP070091
 */
public class NotificationPanel extends javax.swing.JPanel {
    private final DefaultTableModel model = new DefaultTableModel() {
        @Override
        public boolean isCellEditable(int row, int column){  
            return false;  
        }
    };
    private final TableRowSorter<DefaultTableModel> sorter = new TableRowSorter<>(model);
    private final String[] notificationTableColumns = {"ID", "Type", "Sender", "Date", "Time"};
    
    private Customer customer;
    private Notification notification;
    private ArrayList<Notification> allNotification;
    
    public NotificationPanel() {
        initComponents();
        model.setColumnIdentifiers(notificationTableColumns);
        notificationTable.setModel(model);
        notificationTable.setRowSorter(sorter);
        notificationTable.setAutoResizeMode(JTable.AUTO_RESIZE_ALL_COLUMNS);
        notificationTable.setFillsViewportHeight(true);
    }
    
    public void displayNotifications(Customer customer) {
        this.customer = customer;
        model.setRowCount(0);
        allNotification = new ArrayList<>();
        notification = null;
        
        Notification notifications = new Notification(customer.getId());
        allNotification = notifications.getNotificationList(false);
        
        for (Notification userNotification : allNotification) {
            String[] tableData = {userNotification.getNotificationID(), userNotification.getNotificationType(), userNotification.getSenderID(), 
                userNotification.getDate(), userNotification.getTime()};
            model.addRow(tableData);
        }
    }
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        scrollMenuTable = new javax.swing.JScrollPane();
        notificationTable = new javax.swing.JTable();
        lblNotification = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        txtMessage = new javax.swing.JTextArea();
        btnDelete = new javax.swing.JButton();
        btnDeleteAll = new javax.swing.JButton();
        btnView = new javax.swing.JButton();

        setBackground(new java.awt.Color(255, 255, 255));
        setMaximumSize(new java.awt.Dimension(906, 580));
        setMinimumSize(new java.awt.Dimension(906, 580));
        setPreferredSize(new java.awt.Dimension(906, 580));

        scrollMenuTable.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_ALWAYS);
        scrollMenuTable.setMaximumSize(new java.awt.Dimension(1000, 1000));
        scrollMenuTable.setMinimumSize(new java.awt.Dimension(518, 504));
        scrollMenuTable.setPreferredSize(new java.awt.Dimension(518, 504));

        notificationTable.setModel(model);
        notificationTable.setRowHeight(25);
        notificationTable.setShowGrid(false);
        notificationTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                notificationTableMouseReleased(evt);
            }
        });
        scrollMenuTable.setViewportView(notificationTable);

        lblNotification.setFont(new java.awt.Font("SansSerif", 1, 36)); // NOI18N
        lblNotification.setText("Notification");

        txtMessage.setEditable(false);
        txtMessage.setBackground(new java.awt.Color(255, 255, 255));
        txtMessage.setColumns(20);
        txtMessage.setFont(new java.awt.Font("Dubai Light", 0, 16)); // NOI18N
        txtMessage.setLineWrap(true);
        txtMessage.setWrapStyleWord(true);
        txtMessage.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        jScrollPane1.setViewportView(txtMessage);

        btnDelete.setText("Delete");
        btnDelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDeleteActionPerformed(evt);
            }
        });

        btnDeleteAll.setText("Delete All");
        btnDeleteAll.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDeleteAllActionPerformed(evt);
            }
        });

        btnView.setText("View");
        btnView.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnViewActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(16, 16, 16)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(lblNotification, javax.swing.GroupLayout.PREFERRED_SIZE, 380, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(btnDeleteAll, javax.swing.GroupLayout.PREFERRED_SIZE, 128, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(scrollMenuTable, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 360, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addComponent(btnDelete, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(btnView, javax.swing.GroupLayout.PREFERRED_SIZE, 360, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnDeleteAll, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblNotification))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jScrollPane1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnView, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnDelete, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(scrollMenuTable, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(27, 27, 27))
        );

        layout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {btnDelete, btnView});

    }// </editor-fold>//GEN-END:initComponents

    private void btnDeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDeleteActionPerformed
        if (notification != null) {
            if (notification.deleteNotification()) {
                txtMessage.setText("");
            } else {
                JOptionPane.showMessageDialog(this, "Unable to delete notification. Please try again.");
            }
            displayNotifications(customer);
        } else {
            JOptionPane.showMessageDialog(this, "Please select a notifcation to delete a notification.");
        }
    }//GEN-LAST:event_btnDeleteActionPerformed

    private void btnViewActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnViewActionPerformed
        if (notification != null) {
            String notificationType = notification.getNotificationType();
            MainPanel mainPanel = (MainPanel) this.getParent();

            if (notificationType.equals("Order") || notificationType.equals("Delivery") || notificationType.equals("Pending Order")) {
                mainPanel.displayCurrentOrder(customer);
            } else if (notificationType.equals("Dine-in Order")) {
                mainPanel.displayDineInOrder(customer);
            } else if (notificationType.equals("Rejected Order")) {
                mainPanel.displayBrowseVendor(customer);
            } else if (notificationType.contains("Receipt")){
                mainPanel.displayTransaction(customer);
            } else if (notificationType.contains("Top-up")) {
                mainPanel.displayProfile(customer);
            }
        }
    }//GEN-LAST:event_btnViewActionPerformed

    private void notificationTableMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_notificationTableMouseReleased
        int selectedIndex = notificationTable.getSelectedRow();
        if (selectedIndex >= 0) {
            String notificationID = (String) notificationTable.getValueAt(selectedIndex, 0);
            notification = (Notification) new Notification(customer.getId(), notificationID).getObject("Notification");
            
            for (Notification notification : allNotification) {
                if (notification.getNotificationID().equals(notificationID)) {
                    txtMessage.setText(notification.getMessage());
                    switch (notification.getNotificationType()) {
                        case "Delivery" -> btnView.setText("View Delivery");
                        case "Order" -> btnView.setText("View Order");
                        case "Pending Order" -> btnView.setText("View Pending Order");
                        case "Receipt" -> btnView.setText("View Receipt");
                        case "Top-up" -> btnView.setText("View Account");
                        default -> {
                        }
                    }
                    break;
                }
            }
        }
    }//GEN-LAST:event_notificationTableMouseReleased

    private void btnDeleteAllActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDeleteAllActionPerformed
        if (model.getRowCount() > 0) {
            Notification tempNotification = new Notification(customer.getId());
            if (tempNotification.deleteAllNotification()) {
                JOptionPane.showMessageDialog(this, "All notification deleted.");
                txtMessage.setText("");
                btnView.setVisible(false);
            } else {
                JOptionPane.showMessageDialog(this, "Unable to delete all notification. Please try again.");
            }
            displayNotifications(customer);
        } else {
            JOptionPane.showMessageDialog(this, "You do not have any notifcations to delete!");
        }
    }//GEN-LAST:event_btnDeleteAllActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnDelete;
    private javax.swing.JButton btnDeleteAll;
    private javax.swing.JButton btnView;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel lblNotification;
    private javax.swing.JTable notificationTable;
    private javax.swing.JScrollPane scrollMenuTable;
    private javax.swing.JTextArea txtMessage;
    // End of variables declaration//GEN-END:variables
}
